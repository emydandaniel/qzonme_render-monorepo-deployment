import { pgTable, text, serial, integer, boolean, timestamp, jsonb } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// User schema
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull(),
});

export const insertUserSchema = createInsertSchema(users).pick({
  username: true,
});

// Quiz schema (enhanced for auto-create)
export const quizzes = pgTable("quizzes", {
  id: serial("id").primaryKey(),
  creatorId: integer("creator_id").notNull(),
  creatorName: text("creator_name").notNull(),
  accessCode: text("access_code").notNull().unique(),
  urlSlug: text("url_slug").notNull().unique(),
  dashboardToken: text("dashboard_token").notNull().unique(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  // Auto-create specific fields
  isAutoGenerated: boolean("is_auto_generated").default(false),
  sourceType: text("source_type"), // 'document', 'link', 'youtube', 'topic', 'mixed'
  originalContent: text("original_content"), // Store original input for reference
  aiModel: text("ai_model"), // Track which AI model was used
  generationMetadata: jsonb("generation_metadata"), // Store generation settings
});

export const insertQuizSchema = createInsertSchema(quizzes).omit({
  id: true,
  createdAt: true,
});

// Question schema
export const questions = pgTable("questions", {
  id: serial("id").primaryKey(),
  quizId: integer("quiz_id").notNull(),
  text: text("text").notNull(),
  type: text("type").notNull(), // Now only "multiple-choice"
  options: jsonb("options").notNull(), // For multiple-choice: array of options
  correctAnswers: jsonb("correct_answers").notNull(), // Array of correct answers
  hint: text("hint"), // Keeping for backwards compatibility
  order: integer("order").notNull(), // Question order in the quiz
  imageUrl: text("image_url"), // Added for storing image URLs for questions
});

export const insertQuestionSchema = createInsertSchema(questions).omit({
  id: true,
});

// QuizAttempt schema
export const quizAttempts = pgTable("quiz_attempts", {
  id: serial("id").primaryKey(),
  quizId: integer("quiz_id").notNull(),
  userAnswerId: integer("user_answer_id").notNull(),
  userName: text("user_name").notNull(),
  score: integer("score").notNull(),
  totalQuestions: integer("total_questions").notNull(),
  answers: jsonb("answers").notNull(), // Array of answers with question IDs
  completedAt: timestamp("completed_at").defaultNow().notNull(),
});

export const insertQuizAttemptSchema = createInsertSchema(quizAttempts).omit({
  id: true,
  completedAt: true,
});

// Question Answer schema for validation
export const questionAnswerSchema = z.object({
  questionId: z.number(),
  userAnswer: z.union([z.string(), z.array(z.string())]),
  isCorrect: z.boolean().optional(),
});

// Type definitions
export type User = typeof users.$inferSelect;
export type InsertUser = z.infer<typeof insertUserSchema>;

export type Quiz = typeof quizzes.$inferSelect;
export type InsertQuiz = z.infer<typeof insertQuizSchema>;

export type Question = typeof questions.$inferSelect;
export type InsertQuestion = z.infer<typeof insertQuestionSchema>;

export type QuizAttempt = typeof quizAttempts.$inferSelect;
export type InsertQuizAttempt = z.infer<typeof insertQuizAttemptSchema>;

export type QuestionAnswer = z.infer<typeof questionAnswerSchema>;

// Auto Create Usage Tracking schema
export const autoCreateUsage = pgTable("auto_create_usage", {
  id: serial("id").primaryKey(),
  ipAddress: text("ip_address").notNull(),
  usageDate: text("usage_date").notNull(), // YYYY-MM-DD format
  usageCount: integer("usage_count").default(1).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

export const insertAutoCreateUsageSchema = createInsertSchema(autoCreateUsage).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

// Content Cache schema (for caching extracted content)
export const contentCache = pgTable("content_cache", {
  id: serial("id").primaryKey(),
  contentHash: text("content_hash").notNull().unique(), // Hash of URL or content
  contentType: text("content_type").notNull(), // 'web', 'youtube', 'document'
  originalUrl: text("original_url"), // Original URL if applicable
  extractedContent: text("extracted_content").notNull(),
  contentQuality: integer("content_quality"), // Quality score 1-10
  extractionMetadata: jsonb("extraction_metadata"), // Store extraction details
  createdAt: timestamp("created_at").defaultNow().notNull(),
  expiresAt: timestamp("expires_at").notNull(),
});

export const insertContentCacheSchema = createInsertSchema(contentCache).omit({
  id: true,
  createdAt: true,
});

// Auto Create Generation Log schema (for tracking AI generations)
export const autoCreateGenerationLog = pgTable("auto_create_generation_log", {
  id: serial("id").primaryKey(),
  ipAddress: text("ip_address").notNull(),
  userId: integer("user_id"), // Optional, if user is logged in
  quizId: integer("quiz_id"), // Link to generated quiz
  inputSources: jsonb("input_sources").notNull(), // Array of input sources used
  generationSettings: jsonb("generation_settings").notNull(), // Difficulty, language, etc.
  aiModel: text("ai_model").notNull(),
  generationTime: integer("generation_time"), // Time taken in milliseconds
  questionsGenerated: integer("questions_generated").notNull(),
  success: boolean("success").notNull(),
  errorMessage: text("error_message"), // If generation failed
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const insertAutoCreateGenerationLogSchema = createInsertSchema(autoCreateGenerationLog).omit({
  id: true,
  createdAt: true,
});

// Type definitions for new schemas
export type AutoCreateUsage = typeof autoCreateUsage.$inferSelect;
export type InsertAutoCreateUsage = z.infer<typeof insertAutoCreateUsageSchema>;

export type ContentCache = typeof contentCache.$inferSelect;
export type InsertContentCache = z.infer<typeof insertContentCacheSchema>;

export type AutoCreateGenerationLog = typeof autoCreateGenerationLog.$inferSelect;
export type InsertAutoCreateGenerationLog = z.infer<typeof insertAutoCreateGenerationLogSchema>;
